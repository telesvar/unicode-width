/* Generated by unicode-width generator.
 *
 * Unicode 16.0.0 data.
 * For terminal width calculation.
 *
 * Copyright 2025 Dair Aidarkhanov
 * SPDX-License-Identifier: 0BSD
 */

#ifndef UNICODE_WIDTH_H_
#define UNICODE_WIDTH_H_

#include <stddef.h> /* size_t */

#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdint.h> /* uint_least32_t, uint_least16_t, uint_least8_t */
#else
#include <limits.h>

/* Compile-time environment checks for C89. */

/* Enforce that char is at least 8 bits. */
#if CHAR_BIT < 8
#error "this implementation has `CHAR_BIT` < 8; unsupported"
#endif

/* uint_least8_t: choose the smallest type with at least 8 bits. */
#if UCHAR_MAX >= 0xFFu
typedef unsigned char uint_least8_t;
#elif USHRT_MAX >= 0xFFu
typedef unsigned short uint_least8_t;
#elif UINT_MAX >= 0xFFu
typedef unsigned int uint_least8_t;
#elif ULONG_MAX >= 0xFFul
typedef unsigned long uint_least8_t;
#else
#error "no suitable type for `uint_least8_t` (need >= 8 bits)"
#endif

/* uint_least16_t: choose the smallest type with at least 16 bits. */
#if USHRT_MAX >= 0xFFFFu
typedef unsigned short uint_least16_t;
#elif UINT_MAX >= 0xFFFFu
typedef unsigned int uint_least16_t;
#elif ULONG_MAX >= 0xFFFFul
typedef unsigned long uint_least16_t;
#else
#error "no suitable type for `uint_least16_t` (need >= 16 bits)"
#endif

/* uint_least32_t: choose the smallest type with at least 32 bits. */
#if UINT_MAX >= 0xFFFFFFFFu
typedef unsigned int uint_least32_t;
#elif ULONG_MAX >= 0xFFFFFFFFul
typedef unsigned long uint_least32_t;
#else
#error "no suitable type for `uint_least32_t` (need >= 32 bits)"
#endif

/* Enforce that unsigned long is at least 32 bits. */
#if ULONG_MAX < 0xFFFFFFFFul
#error "this implementation has unsigned long < 32 bits; unsupported"
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

#define UNICODE_WIDTH_VERSION_MAJOR 16
#define UNICODE_WIDTH_VERSION_MINOR 0
#define UNICODE_WIDTH_VERSION_PATCH 0

typedef enum {
  WIDTH_STATE_DEFAULT = 0,
  WIDTH_STATE_AFTER_CR = 1,
  WIDTH_STATE_RI_ODD = 2,
  WIDTH_STATE_RI_EVEN = 3,
  WIDTH_STATE_ZWJ_PENDING = 4,
  WIDTH_STATE_ZWJ_ACTIVE = 5
} width_state_t;

typedef struct {
  width_state_t state;
  uint_least32_t prev_codepoint;
  uint_least8_t last_base_width;
  uint_least8_t last_base_is_emoji_variation;
} unicode_width_state_t;

void unicode_width_init(unicode_width_state_t *state);
int unicode_width_process(unicode_width_state_t *state,
                          uint_least32_t codepoint);
int unicode_width_control_char(uint_least32_t codepoint);
void unicode_width_reset(unicode_width_state_t *state);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* UNICODE_WIDTH_H_ */
